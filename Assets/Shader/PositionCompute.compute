#pragma kernel CSMain

struct Particle {
    float3 position;
    float3 direction;
    float size;
    float lifetime;
};

RWStructuredBuffer<Particle> particleBuffer;
float3 windDirection;
float3 gravity;
float deltaTime;
float range;
float lifetimeMax;

//https://www.shadertoy.com/view/llGSzw
float3 hash3(uint n)
{
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 789221U) + 1376312589U;
    uint3 k = n * uint3(n, n * 16807U, n * 48271U);
    uint3 u = uint3(0x7fffffffU, 0x7fffffffU, 0x7fffffffU);
    return float3(k & u) / float(0x7fffffff);
}


[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 pos = particleBuffer[id.x].position;
    float3 direction = particleBuffer[id.x].direction;
    float lifetime = particleBuffer[id.x].lifetime - deltaTime;

    pos = pos + (windDirection * (pos.y / range) + direction + gravity) * deltaTime;
    if (pos.y < 0 || lifetime < 0) {
        //reset to a random (x, z) position in range*range, y = range
        uint i = ((pos.x + range) / (range * 2) * 100 + (pos.y + range) / (range * 2)) * range * range;
        float3 hash = hash3(i);
        pos = (hash - float3(0.5, 0.5, 0.5)) * 2 * range;
        pos.y =  pos.y / 5 + range;
        lifetime = lifetimeMax;
    }

    particleBuffer[id.x].position = pos;
    particleBuffer[id.x].lifetime = lifetime;
}
