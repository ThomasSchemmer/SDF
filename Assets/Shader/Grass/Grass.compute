#pragma kernel createPositions
#pragma kernel updateBase

struct Vertex {
    float3 position;
    float3 normal;
    float2 uv;
};


//per instance
float3 worldPos;
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<Vertex> grassBuffer;
RWStructuredBuffer<int> triangleBuffer;
RWStructuredBuffer<float2> uvs;

//global
float2 timeOffset;
uint verticesSize;
float desiredSize;
float3 camForward;
float3 camPos;
float3 lightPos;
float3 minPos, maxPos;
//bind to set uav access, otherwise shader might crash
uniform RWTexture2D<float4> perlinTex : register(u1);


//totalID: GroupID + GroupThreadID
//threadID: inner ID (numthreads)
//groupID: Outer ID (dispatch call)
//create a basic grid mesh, that is slightly offset with perlin noise. Height is also purely perlin noise dependant
[numthreads(16, 1, 16)]
void createPositions(uint3 totalID : SV_DispatchThreadID, uint3 threadID : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint index = threadID.z * 1 * 16 +
        threadID.y * 16 +
        threadID.x;
    uint amountPerThread = verticesSize / (16 * 16);
    uint width = ceil(sqrt(verticesSize));
    float2 tLength = float2(maxPos.x - minPos.x, maxPos.z - minPos.z);
    //bottom left and top right uv coords of the instanced grid
    float2 uv = float2((worldPos.x - minPos.x) / tLength.x, (worldPos.z - minPos.z) / tLength.y);
    float2 uvMax = float2((worldPos.x + desiredSize - minPos.x) / tLength.x, (worldPos.z + desiredSize - minPos.z) / tLength.y);
    float2 uvDiff = uvMax - uv;

    for (uint i = 0; i < amountPerThread; i++) {
        uint indexI = index * amountPerThread + i;
        float x = fmod(indexI, width);
        float z = indexI / width;
        //where are we percentage based in our instanced grid?
        float2 percPos = float2(x / width, z / width);
        float2 tuv = uv + float2(percPos.x * uvDiff.x, percPos.y * uvDiff.y);
        float p1 = (perlinTex[tuv.xy * width].x - 0.5) * 2;
        float p2 = (perlinTex[tuv.yx * width].x - 0.5) * 2;
        vertexBuffer[indexI] = float3(percPos.x * desiredSize + p1,
                                p1 + p2,
                                percPos.y * desiredSize + p2); 
        for (uint j = 0; j < 4; j++) {
            //each grass has 2 triangles (6 indices) times 4 sections
            uint tPos = index * amountPerThread * 4 * 6 + i * 4 * 6 + j * 6;
            uint gPos = index * amountPerThread * 5 * 2 + i * 5 * 2 + j;

            triangleBuffer[tPos + 0] = gPos + 0;
            triangleBuffer[tPos + 1] = gPos + 1;
            triangleBuffer[tPos + 2] = gPos + 6;
            triangleBuffer[tPos + 3] = gPos + 0;
            triangleBuffer[tPos + 4] = gPos + 6;
            triangleBuffer[tPos + 5] = gPos + 5;
        }
    }
}

/*



        //where are we percentage wise in our instanced grid?
        float2 percPos = float2(x * desiredSize / width, z * desiredSize / width);
        float2 tuv = uv + float2(percPos.x * uvMax.x, percPos.y * uvMax.y) / desiredSize;
        float p = perlinTex[tuv].r;


*/

/* 
    create the grass strips, one per each vertex
    each grass consists of 5*2 vertices. Smallest design:
   3 |\---|1
     | \  |
     |  \ |
   2 |___\|0
    It gets turned so that it is orthogonal to the viewing direction.
    Mesh vertices are stored in order of input mesh positions, each input vertex represents 2 sides of 
    grass blade, each having 5 vertices
    UV calculation: left side is x = 0, right side x = 1. Bottom is y = 0, top is y = 1
    We have to rotate the grass orthogonal towards the viewing direction, otherwise it will simply be skipped
*/
//update the rotation and angle of the blades according to camera position/angle
//also add a bending according to a simulated wind with perlin noise (due to local coherency)
[numthreads(16, 1, 16)]
void updateBase(uint3 totalID : SV_DispatchThreadID, uint3 threadID : SV_GroupThreadID, uint3 groupID : SV_GroupID) {
    uint index = threadID.z * 1 * 16 +
        threadID.y * 16 +
        threadID.x;
    uint amountPerThread = verticesSize / (16 * 16);
    uint width = ceil(sqrt(verticesSize));
    float3 forward = normalize(vertexBuffer[index * amountPerThread] - camPos);
    float3 right = normalize(cross(forward, float3(0, 1, 0))) * 0.02;
    float3 up = float3(0, 1, 0);
    float resolution = 5.0;
    float height = 2.0;

    //bottom left and top right uv coords of the instanced grid
    float2 tLength = float2(maxPos.x - minPos.x, maxPos.z - minPos.z);
    float2 uv = float2((worldPos.x - minPos.x) / tLength.x, (worldPos.z - minPos.z) / tLength.y);
    float2 uvMax = float2((worldPos.x + desiredSize - minPos.x) / tLength.x, (worldPos.z + desiredSize - minPos.z) / tLength.y);
    float2 uvDiff = uvMax - uv;

    for (uint i = 0; i < amountPerThread; i++) {
        uint indexI = index * amountPerThread + i;
        float3 rootPos = vertexBuffer[indexI];
        float x = fmod(indexI, width);
        float z = indexI / width;
        float2 percPos = float2(x / width, z / width);
        float2 tuv = uv + float2(percPos.x * uvDiff.x, percPos.y * uvDiff.y);

        float pX = perlinTex[tuv.xy * width].x;
        float pZ = perlinTex[tuv.yx * width].x;

        float3 offset = -float3(pX, 0, pZ);
        float3 orth = normalize(cross(offset, float3(0, 1, 0)));
        float3 normal = float3(0, 0, 0);

        for (uint j = 0; j < 5; j++) {
            //each grass has 2 sides a 5 vertices
            uint gPos = index * amountPerThread * 5 * 2 + i * 5 * 2 + j;
            float y = j / (resolution - 1.0);
            float nextY = (j + 1) / (resolution - 1.0);

            float3 vertexPos = rootPos + up * y * height + offset * y * y;
            float3 nextVertexPos = rootPos + up * nextY * height + offset * nextY * nextY;
            //normal calculation takes the vertex left to and the one above the current vertex
            //the last vertex of each row just takes the previous normal values

            normal = j < 4 ?
                cross(normalize(nextVertexPos + orth - vertexPos), normalize(nextVertexPos - vertexPos))
                : normal;

            Vertex leftVertex, rightVertex;
            rightVertex.position = vertexPos + right * (1.1 - y * y);
            leftVertex.position = vertexPos - right * (1.1 - y * y);
            rightVertex.normal = normal;
            leftVertex.normal = normal;
            rightVertex.uv = float2(1, y);
            leftVertex.uv = float2(0, y);

            grassBuffer[gPos] = rightVertex;
            grassBuffer[gPos + 5] = leftVertex;

        }

    }
}

