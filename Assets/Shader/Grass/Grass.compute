#pragma kernel createPositions
#pragma kernel updateBase

struct Vertex {
    float3 position;
    float3 normal;
    float2 uv;
};

RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<Vertex> grassBuffer;
RWStructuredBuffer<int> triangleBuffer;
RWStructuredBuffer<float2> uvs;

uint verticesSize;
float desiredSize;
float3 camForward;
float3 camPos;
float3 lightPos;

float perlin(float3 worldPos); 
float perlinLoop(float3 worldPos, float Frequency, float Amplitude);
groupshared float3 vectors[12] = {
    float3(1,1,0), float3(-1,1,0), float3(1,-1,0), float3(-1,-1,0),
    float3(1,0,1), float3(-1,0,1), float3(1,0,-1), float3(-1,0,-1),
    float3(0,1,1), float3(0,-1,1), float3(0,1,-1), float3(0,-1,-1)
};

groupshared uint p[256] = { 151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};


float random(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453123);
}

//totalID: GroupID + GroupThreadID
//threadID: inner ID (numthreads)
//groupID: Outer ID (dispatch call)
//create a basic grid mesh, that is slightly offset with perlin noise. Height is also purely perlin noise dependant
[numthreads(16, 1, 16)]
void createPositions(uint3 totalID : SV_DispatchThreadID, uint3 threadID : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    uint index = threadID.z * 1 * 16 +
        threadID.y * 16 +
        threadID.x;
    uint amountPerThread = verticesSize / (16 * 16);
    uint width = ceil(sqrt(verticesSize));

    for (uint i = 0; i < amountPerThread; i++) {
        uint indexI = index * amountPerThread + i;
        float x = fmod(indexI, width);
        float z = indexI / width;
        float3 percPos = float3(x * desiredSize / width, 0.01, z * desiredSize / width);
        
        float p = perlinLoop(percPos, 2, 4);
        vertexBuffer[indexI] = float3(percPos.x + p * 10, p * 2, percPos.z - p * 10);

        for (uint j = 0; j < 4; j++) {
            //each grass has 2 triangles (6 indices) times 4 sections
            uint tPos = index * amountPerThread * 4 * 6 + i * 4 * 6 + j * 6;
            uint gPos = index * amountPerThread * 5 * 2 + i * 5 * 2 + j;

            triangleBuffer[tPos + 0] = gPos + 0;
            triangleBuffer[tPos + 1] = gPos + 1;
            triangleBuffer[tPos + 2] = gPos + 6;
            triangleBuffer[tPos + 3] = gPos + 0;
            triangleBuffer[tPos + 4] = gPos + 6;
            triangleBuffer[tPos + 5] = gPos + 5;
        }
    }
}

/* 
    create the grass strips, one per each vertex
    each grass consists of 5*2 vertices. Smallest design:
   3 |\---|1
     | \  |
     |  \ |
   2 |___\|0
    It gets turned so that it is orthogonal to the viewing direction.
    Mesh vertices are stored in order of input mesh positions, each input vertex represents 2 sides of 
    grass blade, each having 5 vertices
    UV calculation: left side is x = 0, right side x = 1. Bottom is y = 0, top is y = 1
    We have to rotate the grass orthogonal towards the viewing direction, otherwise it will simply be skipped
*/
//update the rotation and angle of the blades according to camera position/angle
//also add a bending according to a simulated wind with perlin noise (due to local coherency)
[numthreads(16, 1, 16)]
void updateBase(uint3 totalID : SV_DispatchThreadID, uint3 threadID : SV_GroupThreadID, uint3 groupID : SV_GroupID) {
    uint index = threadID.z * 1 * 16 +
        threadID.y * 16 +
        threadID.x;
    uint amountPerThread = verticesSize / (16 * 16);
    float3 forward = normalize(vertexBuffer[index * amountPerThread] - camPos);
    float3 right = normalize(cross(forward, float3(0, 1, 0))) * 0.02;
    float3 up = float3(0, 1, 0);

    for (uint i = 0; i < amountPerThread; i++) {
        uint indexI = index * amountPerThread + i;
        float3 rootPos = vertexBuffer[indexI];
        float resolution = 5.0;
        float height = 2.0;
        float pX = perlin(float3(rootPos.x, 0.1, rootPos.z));
        float pZ = perlin(float3(rootPos.z, 0.1, rootPos.x));
        float3 offset = -float3(pX, 0, pZ);
        float3 orth = normalize(cross(offset, float3(0, 1, 0)));
        float3 normal = float3(0, 0, 0);

        for (uint j = 0; j < 5; j++) {
            //each grass has 2 sides a 5 vertices
            uint gPos = index * amountPerThread * 5 * 2 + i * 5 * 2 + j;
            float y = j / (resolution - 1.0);
            float nextY = (j + 1) / (resolution - 1.0);

            float3 vertexPos = rootPos + up * y * height + offset * y * y;
            float3 nextVertexPos = rootPos + up * nextY * height + offset * nextY * nextY;
            //normal calculation takes the vertex left to and the one above the current vertex
            //the last vertex of each row just takes the previous normal values

            normal = j < 4 ?
                cross(normalize(nextVertexPos + orth - vertexPos), normalize(nextVertexPos - vertexPos))
                : normal;

            Vertex leftVertex, rightVertex;
            rightVertex.position = vertexPos + right * (1.1 - y * y);
            leftVertex.position = vertexPos - right * (1.1 - y * y);
            rightVertex.normal = normal;
            leftVertex.normal = normal;
            rightVertex.uv = float2(1, y);
            leftVertex.uv = float2(0, y);

            grassBuffer[gPos] = rightVertex;
            grassBuffer[gPos + 5] = leftVertex;

        }

    }
}


// ------------------------ PERLIN NOISE FUNCTION -----------------------------------


float fade(float t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
}

float grad(uint hash, float x, float y, float z) {
    float3 v = vectors[(hash & 0xF) % 12];
    return v.x * x + v.y * y + v.z * z;
}

float perlin(float3 worldPos) {
    uint3 xyzi = uint3(abs(worldPos.x) % 256, abs(worldPos.y) % 256, abs(worldPos.z) % 256);

    float3 xyzf = float3(abs(worldPos.x) - xyzi.x, abs(worldPos.y) - xyzi.y, abs(worldPos.z) - xyzi.z);
    float3 uvw = float3(fade(xyzf.x), fade(xyzf.y), fade(xyzf.z));

    uint aaa, aab, aba, abb, baa, bab, bba, bbb;
    aaa = p[p[p[xyzi.x] + xyzi.y] + xyzi.z];
    aba = p[p[p[xyzi.x] + xyzi.y + 1] + xyzi.z];
    aab = p[p[p[xyzi.x] + xyzi.y] + xyzi.z + 1];
    abb = p[p[p[xyzi.x] + xyzi.y + 1] + xyzi.z + 1];
    baa = p[p[p[xyzi.x + 1] + xyzi.y] + xyzi.z];
    bba = p[p[p[xyzi.x + 1] + xyzi.y + 1] + xyzi.z];
    bab = p[p[p[xyzi.x + 1] + xyzi.y] + xyzi.z + 1];
    bbb = p[p[p[xyzi.x + 1] + xyzi.y + 1] + xyzi.z + 1];


    float a, b, c1, c2;
    a = lerp(grad(aaa, xyzf.x, xyzf.y, xyzf.z),
        grad(baa, xyzf.x - 1, xyzf.y, xyzf.z), uvw.x);
    b = lerp(grad(aba, xyzf.x, xyzf.y - 1, xyzf.z),
        grad(bba, xyzf.x - 1, xyzf.y - 1, xyzf.z), uvw.x);
    c1 = lerp(a, b, uvw.y);
    a = lerp(grad(aab, xyzf.x, xyzf.y, xyzf.z - 1),
        grad(bab, xyzf.x - 1, xyzf.y, xyzf.z - 1), uvw.x);
    b = lerp(grad(abb, xyzf.x, xyzf.y - 1, xyzf.z - 1),
        grad(bbb, xyzf.x - 1, xyzf.y - 1, xyzf.z - 1), uvw.x);
    c2 = lerp(a, b, uvw.y);
    
    return (lerp(c1, c2, uvw.z) + 1) / 2;
}

float perlinLoop(float3 worldPos, float Frequency, float Amplitude) {
    float total = 0;
    float maxValue = 0;
    float frequency = 1;
    float amplitude = 1;
    for (int i = 0; i < Frequency; i++) {
        total += perlin(worldPos * frequency) * amplitude;
        maxValue += amplitude;
        amplitude *= Amplitude;
        frequency *= 2;
    }
    return total / maxValue;
}

